/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WordData,
  WordView,
} from '../models/index';
import {
    WordDataFromJSON,
    WordDataToJSON,
    WordViewFromJSON,
    WordViewToJSON,
} from '../models/index';

export interface CreateWordRequest {
    wordView: WordView;
}

/**
 * 
 */
export class APIApi extends runtime.BaseAPI {

    /**
     */
    async createWordRaw(requestParameters: CreateWordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.wordView === null || requestParameters.wordView === undefined) {
            throw new runtime.RequiredError('wordView','Required parameter requestParameters.wordView was null or undefined when calling createWord.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/web-client/word`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WordViewToJSON(requestParameters.wordView),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createWord(requestParameters: CreateWordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createWordRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteALlRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/web-client/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteALl(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteALlRaw(initOverrides);
    }

    /**
     */
    async generateAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/web-client/generateAll`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async generateAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.generateAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all today words
     */
    async generateTodayRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/web-client/generate-today`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get all today words
     */
    async generateToday(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.generateTodayRaw(initOverrides);
        return await response.value();
    }

    /**
     * getAllWords
     */
    async getAllWordsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WordData>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/web-client/get-all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WordDataFromJSON));
    }

    /**
     * getAllWords
     */
    async getAllWords(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WordData>> {
        const response = await this.getAllWordsRaw(initOverrides);
        return await response.value();
    }

    // @ts-ignore
    /**
     * Get all today words
     */
    async getAllWordsTodayRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WordData>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/web-client/today`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WordDataFromJSON));
    }

    /**
     * Get all today words
     */
    async getAllWordsToday(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WordData>> {
        const response = await this.getAllWordsTodayRaw(initOverrides);
        return await response.value();
    }

}
